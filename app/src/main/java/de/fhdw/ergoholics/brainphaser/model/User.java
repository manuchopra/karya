package de.fhdw.ergoholics.brainphaser.model;

import java.util.List;
import de.fhdw.ergoholics.brainphaser.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String avatar;
    private long settingsId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private Settings settings;
    private Long settings__resolvedKey;

    private List<Completion> completions;
    private List<Statistics> statistics;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String name, String avatar, long settingsId) {
        this.id = id;
        this.name = name;
        this.avatar = avatar;
        this.settingsId = settingsId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getAvatar() {
        return avatar;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public long getSettingsId() {
        return settingsId;
    }

    public void setSettingsId(long settingsId) {
        this.settingsId = settingsId;
    }

    /** To-one relationship, resolved on first access. */
    public Settings getSettings() {
        long __key = this.settingsId;
        if (settings__resolvedKey == null || !settings__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SettingsDao targetDao = daoSession.getSettingsDao();
            Settings settingsNew = targetDao.load(__key);
            synchronized (this) {
                settings = settingsNew;
            	settings__resolvedKey = __key;
            }
        }
        return settings;
    }

    public void setSettings(Settings settings) {
        if (settings == null) {
            throw new DaoException("To-one property 'settingsId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.settings = settings;
            settingsId = settings.getId();
            settings__resolvedKey = settingsId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Completion> getCompletions() {
        if (completions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CompletionDao targetDao = daoSession.getCompletionDao();
            List<Completion> completionsNew = targetDao._queryUser_Completions(id);
            synchronized (this) {
                if(completions == null) {
                    completions = completionsNew;
                }
            }
        }
        return completions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCompletions() {
        completions = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Statistics> getStatistics() {
        if (statistics == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StatisticsDao targetDao = daoSession.getStatisticsDao();
            List<Statistics> statisticsNew = targetDao._queryUser_Statistics(id);
            synchronized (this) {
                if(statistics == null) {
                    statistics = statisticsNew;
                }
            }
        }
        return statistics;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStatistics() {
        statistics = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
