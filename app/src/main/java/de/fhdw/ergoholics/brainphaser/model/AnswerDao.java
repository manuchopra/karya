package de.fhdw.ergoholics.brainphaser.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.fhdw.ergoholics.brainphaser.model.Answer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWER".
*/
public class AnswerDao extends AbstractDao<Answer, Long> {

    public static final String TABLENAME = "ANSWER";

    /**
     * Properties of entity Answer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property AnswerCorrect = new Property(2, Boolean.class, "answerCorrect", false, "ANSWER_CORRECT");
        public final static Property ChallengeId = new Property(3, long.class, "challengeId", false, "CHALLENGE_ID");
    };

    private Query<Answer> challenge_AnswersQuery;

    public AnswerDao(DaoConfig config) {
        super(config);
    }
    
    public AnswerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TEXT\" TEXT NOT NULL ," + // 1: text
                "\"ANSWER_CORRECT\" INTEGER," + // 2: answerCorrect
                "\"CHALLENGE_ID\" INTEGER NOT NULL );"); // 3: challengeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Answer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getText());
 
        Boolean answerCorrect = entity.getAnswerCorrect();
        if (answerCorrect != null) {
            stmt.bindLong(3, answerCorrect ? 1L: 0L);
        }
        stmt.bindLong(4, entity.getChallengeId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Answer readEntity(Cursor cursor, int offset) {
        Answer entity = new Answer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // text
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // answerCorrect
            cursor.getLong(offset + 3) // challengeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Answer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText(cursor.getString(offset + 1));
        entity.setAnswerCorrect(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setChallengeId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Answer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Answer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "answers" to-many relationship of Challenge. */
    public List<Answer> _queryChallenge_Answers(long challengeId) {
        synchronized (this) {
            if (challenge_AnswersQuery == null) {
                QueryBuilder<Answer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChallengeId.eq(null));
                challenge_AnswersQuery = queryBuilder.build();
            }
        }
        Query<Answer> query = challenge_AnswersQuery.forCurrentThread();
        query.setParameter(0, challengeId);
        return query.list();
    }

}
