package de.fhdw.ergoholics.brainphaser.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.fhdw.ergoholics.brainphaser.model.Settings;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SETTINGS".
*/
public class SettingsDao extends AbstractDao<Settings, Long> {

    public static final String TABLENAME = "SETTINGS";

    /**
     * Properties of entity Settings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TimeBoxStage1 = new Property(1, java.util.Date.class, "timeBoxStage1", false, "TIME_BOX_STAGE1");
        public final static Property TimeBoxStage2 = new Property(2, java.util.Date.class, "timeBoxStage2", false, "TIME_BOX_STAGE2");
        public final static Property TimeBoxStage3 = new Property(3, java.util.Date.class, "timeBoxStage3", false, "TIME_BOX_STAGE3");
        public final static Property TimeBoxStage4 = new Property(4, java.util.Date.class, "timeBoxStage4", false, "TIME_BOX_STAGE4");
        public final static Property TimeBoxStage5 = new Property(5, java.util.Date.class, "timeBoxStage5", false, "TIME_BOX_STAGE5");
        public final static Property TimeBoxStage6 = new Property(6, java.util.Date.class, "timeBoxStage6", false, "TIME_BOX_STAGE6");
    };


    public SettingsDao(DaoConfig config) {
        super(config);
    }
    
    public SettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SETTINGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME_BOX_STAGE1\" INTEGER," + // 1: timeBoxStage1
                "\"TIME_BOX_STAGE2\" INTEGER," + // 2: timeBoxStage2
                "\"TIME_BOX_STAGE3\" INTEGER," + // 3: timeBoxStage3
                "\"TIME_BOX_STAGE4\" INTEGER," + // 4: timeBoxStage4
                "\"TIME_BOX_STAGE5\" INTEGER," + // 5: timeBoxStage5
                "\"TIME_BOX_STAGE6\" INTEGER);"); // 6: timeBoxStage6
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SETTINGS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Settings entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date timeBoxStage1 = entity.getTimeBoxStage1();
        if (timeBoxStage1 != null) {
            stmt.bindLong(2, timeBoxStage1.getTime());
        }
 
        java.util.Date timeBoxStage2 = entity.getTimeBoxStage2();
        if (timeBoxStage2 != null) {
            stmt.bindLong(3, timeBoxStage2.getTime());
        }
 
        java.util.Date timeBoxStage3 = entity.getTimeBoxStage3();
        if (timeBoxStage3 != null) {
            stmt.bindLong(4, timeBoxStage3.getTime());
        }
 
        java.util.Date timeBoxStage4 = entity.getTimeBoxStage4();
        if (timeBoxStage4 != null) {
            stmt.bindLong(5, timeBoxStage4.getTime());
        }
 
        java.util.Date timeBoxStage5 = entity.getTimeBoxStage5();
        if (timeBoxStage5 != null) {
            stmt.bindLong(6, timeBoxStage5.getTime());
        }
 
        java.util.Date timeBoxStage6 = entity.getTimeBoxStage6();
        if (timeBoxStage6 != null) {
            stmt.bindLong(7, timeBoxStage6.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Settings readEntity(Cursor cursor, int offset) {
        Settings entity = new Settings( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // timeBoxStage1
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // timeBoxStage2
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // timeBoxStage3
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // timeBoxStage4
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // timeBoxStage5
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // timeBoxStage6
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Settings entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeBoxStage1(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTimeBoxStage2(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTimeBoxStage3(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setTimeBoxStage4(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setTimeBoxStage5(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setTimeBoxStage6(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Settings entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Settings entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
